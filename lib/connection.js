// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Connection, events, ssh2,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  events = require('events');

  ssh2 = require('ssh2');

  Connection = (function(superClass) {
    extend(Connection, superClass);

    function Connection(options) {
      if (options == null) {
        options = {};
      }
      this._mergeDefaults(options);
    }

    Connection.prototype._mergeDefaults = function(options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      defaults = {
        host: 'localhost',
        port: 22,
        forceIPv4: false,
        forceIPv6: false,
        hostHash: null,
        username: 'root',
        password: null,
        privateKey: null,
        passphrase: null,
        tryKeyboard: false,
        keepaliveInterval: 0,
        keepaliveCountMax: 3,
        readyTimeout: 20 * 1000,
        debug: false
      };
      return this.options = Object.assign({}, defaults, options);
    };

    Connection.prototype._setState = function(state, message) {
      if (state == null) {
        state = 'initialized';
      }
      this._state = state;
      return typeof this.emit === "function" ? this.emit(state, message) : void 0;
    };

    Connection.prototype.connect = function() {
      if ((this._socket != null) && this._socket._state === 'ready') {
        return;
      }
      this._socket = new ssh2.Client();
      this._socket._state = 'connecting';
      this._socket.on('ready', (function(_this) {
        return function() {
          _this._socket._state = 'ready';
          return _this._setState('ready');
        };
      })(this));
      this._socket.on('error', (function(_this) {
        return function(err) {
          _this._socket._state = 'failed';
          return _this._setState('error', err);
        };
      })(this));
      this._socket.on('end', (function(_this) {
        return function() {
          _this._socket._state = 'closed';
          return _this._setState('closed');
        };
      })(this));
      return this._socket.connect(this.options);
    };

    Connection.prototype.disconnect = function(callback) {
      var ref;
      return (ref = this._socket) != null ? ref.end() : void 0;
    };

    Connection.prototype.isReady = function() {
      return this._state === 'ready' && (this._socket != null);
    };

    return Connection;

  })(events.EventEmitter);

  module.exports = Connection;

}).call(this);
