// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Task;

  Task = (function() {
    function Task(options, logger) {
      if (options == null) {
        options = {};
      }
      this.logger = logger != null ? logger : console;
      this.name = options.name, this.command = options.command, this.workDir = options.workDir, this.priority = options.priority, this.stages = options.stages, this.env = options.env, this.pty = options.pty, this.x11 = options.x11;
      if (this.name == null) {
        this.name = ~~(Math.random() * 65535);
      }
      if (this.priority == null) {
        this.priority = 0;
      }
      if (this.stages == null) {
        this.stages = 'all';
      }
      if (this.env == null) {
        this.env = {};
      }
      if (this.pty == null) {
        this.pty = false;
      }
      if (this.x11 == null) {
        this.x11 = false;
      }
    }

    Task.prototype.canExec = function(stage) {
      return this.stages === 'all' || (this.stages.indexOf && (this.stages.indexOf(stage) > -1 || this.stages.indexOf('all') > -1));
    };

    Task.prototype.exec = function(clients, nextTask) {
      var nextServer, serverNames;
      if (clients == null) {
        clients = [];
      }
      serverNames = Object.keys(clients).filter((function(_this) {
        return function(_name) {
          return _this.canExec(clients[_name].getStage());
        };
      })(this));
      if (!(serverNames.length > 0)) {
        return nextTask();
      }
      this.logger.log("╭─ Executing task \u001b[32m" + this.name + "\u001b[39m");
      this.logger.log("╰─➤ on [" + (serverNames.join(', ')) + "]");
      nextServer = (function(_this) {
        return function() {
          var _name, ref;
          if (!(serverNames.length > 0)) {
            return nextTask();
          }
          _name = serverNames.shift();
          if (!((ref = clients[_name]) != null ? ref.isReady() : void 0)) {
            return;
          }
          return clients[_name].exec(_this, nextServer);
        };
      })(this);
      return nextServer();
    };

    return Task;

  })();

  module.exports = Task;

}).call(this);
